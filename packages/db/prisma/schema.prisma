// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  username       String            @unique
  hashedPassword String
  message        Message[]
  chat           ChatParticipant[]
  lastSeen       LastSeen[]
}

model Chat {
  id           String            @id @default(cuid())
  name         String?
  isGroupChat  Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  message      Message[]
  participants ChatParticipant[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([chatId, createdAt])
}

model ChatParticipant {
  id     String @id @default(cuid())
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([chatId, userId])
}

model LastSeen {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   
  time   DateTime
}
